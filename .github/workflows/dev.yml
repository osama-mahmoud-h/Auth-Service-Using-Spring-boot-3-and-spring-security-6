name: CI/CD Pipeline

on:
  push:
    branches:
      - unit-test
  pull_request:
    branches:
      - unit-test

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Compile the application
        run: mvn clean compile


  unit-test:
    runs-on: ubuntu-latest
    needs: [compile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run unit tests
        run: mvn test


  build-docker-image:
    runs-on: ubuntu-latest
    needs: [ unit-test ]
    name: Build and Push Docker image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up environment variables
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/fruit-delivery-server-api:latest

      # check if the image is built successfully
      - name: build & run docker compose
        run: docker-compose up -d --build --force-recreate

      - name: list running containers
        run: docker ps -a

      - name: Check the docker container health status
        run: |
          if ! docker ps -a | grep my-server-api; then
            echo "my-server-api container is not running"
            exit 1
          fi
          
          if ! docker ps -a | grep my-server-db; then
            echo "my-server-db container is not running"
            exit 1
          fi
          
          for i in {1..10}; do
            app_status=$(docker inspect --format='{{.State.Status}}' $(docker ps -q --filter name=my-server-api))
            db_status=$(docker inspect --format='{{.State.Status}}' $(docker ps -q --filter name=my-server-db))
          
            if [ "$app_status" == "running" ] && [ "$db_status" == "running" ]; then
              echo "Both my-server-api and my-server-db containers are running!"
              exit 0
            else
              echo "Waiting for containers to be running..."
              sleep 10
            fi
          done
          
          echo "Containers did not become running in time"
          exit 1


#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-docker-image
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Install SSH key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
#
#      - name: Deploy to DigitalOcean Droplet
#        run: |
#          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITALOCEAN_DROPLET_IP }} << 'EOF'
#            cd /path/to/your/docker-compose
#            docker-compose pull
#            docker-compose up -d --build
#          EOF
